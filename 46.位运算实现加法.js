// 举例: 11和01
// 11 ^ 01 = 10
// (11 & 01) << 1 = 10
// 10 ^ 10 = 0
// (10 & 10) << 1 = 100

// a^b是不考虑进位时加法结果。当二进制位同时为1时,才有进位,因此(a&b)<<1是进位产生的值,称为进位补偿。将两者相加便是完整加法结果
// 利用上面的等式不停对自身进行迭代。每迭代一次,进位补偿右边就多一位0,因此最多需要加数二进制位长度次迭代,进位补偿就变为0,这时运算结束

function Add(num1, num2) {
  let a = num1 & num2
  let b = num1 ^ num2

  while (a) {
    let c = b
    let d = a << 1
    a = c & d
    b = c ^ d
  }

  return b
}